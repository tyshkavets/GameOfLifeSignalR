@{
    ViewBag.Title = "Index";
}

<h2>Conway's Game of Life via SignalR</h2>

<div>
    
    <input type="hidden" value="0" id="Generation" />

    <div class="btn-toolbar">
        <div class="btn-group" data-toggle="buttons-radio"> 
            <button type="button" class="btn" id="ResumeButton"><i class="icon-play"></i></button>
            <button type="button" class="btn" id="PauseButton"><i class="icon-pause"></i></button>
        </div>
        
        <div class="btn-group" data-toggle="buttons-radio"> 
            <button type="button" class="btn" id="Timeout1">1 s</button>
            <button type="button" class="btn" id="Timeout5">5 s</button>
            <button type="button" class="btn" id="Timeout10">10 s</button>
        </div>
    </div>
    
</div>

<script type="text/javascript">

    $(function () {
        var game = $.connection.gameHub;

        game.updateGeneration = function () {
            game.requestChanges($('#Generation').val());            
        };

        game.processDiff = function (state) {
            $('#Generation').val(state.CurrentGeneration);
            var bCanvas = document.getElementById("gameCanvas");
            var bContext = bCanvas.getContext("2d");
            bContext.fillStyle = "rgb(255,255,255)";
            for (var i = 0; i < state.Dead.length; i++)
            {
                bContext.fillRect(state.Dead[i].X * 5, state.Dead[i].Y * 5, 5, 5);
            }
            bContext.fillStyle = "rgb(0,0,0)";
            for (i = 0; i < state.Born.length; i++) {
                bContext.fillRect(state.Born[i].X * 5, state.Born[i].Y * 5, 5, 5);
            }            
        };

        game.setPaused = function () {
            $('#ResumeButton').removeClass('active');
            $('#PauseButton').addClass('active');
        };
        
        game.setResumed = function () {
            $('#PauseButton').removeClass('active');
            $('#ResumeButton').addClass('active');
        };

        game.sendTimeoutChange = function(seconds) {
            if (seconds == 1) {
                $('#Timeout5').removeClass('active');
                $('#Timeout10').removeClass('active');
                $('#Timeout1').addClass('active');
            }
            if (seconds == 5) {
                $('#Timeout1').removeClass('active');
                $('#Timeout10').removeClass('active');
                $('#Timeout5').addClass('active');
            }
            if (seconds == 10) {
                $('#Timeout5').removeClass('active');
                $('#Timeout1').removeClass('active');
                $('#Timeout10').addClass('active');
            }
        };

        game.sendChangeCell = function (x, y, color) {
            var bCanvas = document.getElementById("gameCanvas");
            var bContext = bCanvas.getContext("2d");
            if (color == 1) {
                bContext.fillStyle = "rgb(0,0,0)";
            }
            else {
                bContext.fillStyle = "rgb(255,255,255)";
            }            
            bContext.fillRect(x*5, y*5, 5, 5);
        };

        $.connection.hub.start();
        
        $('#PauseButton').click(function () {
            game.pause();
        });

        $('#ResumeButton').click(function () {
            game.resume();
        });

        $('[id^="Timeout"]').click(function() {
            var secondsValue = $(this).attr('id').substr(7);
            game.setTimeout(secondsValue);
        });

        $('#gameCanvas').click(function (e) {
            var x = Math.floor((e.pageX - $("#gameCanvas").offset().left) / 5);
            var y = Math.floor((e.pageY - $("#gameCanvas").offset().top) / 5);
            var point = {};
            point.X = x;
            point.Y = y;
            game.invertCell(point);
        });

        $('#Timeout' + @ViewBag.Seconds).addClass('active');
        $('#' + '@ViewBag.Paused' + "Button").addClass('active');
    });

</script>

<canvas id="gameCanvas" width="500" height="500" style="border:1px solid black;"></canvas>

<div style="width:500px">
    <div class="alert alert-info">
        <ul>
            <li>Click on the cell to invert its state.</li>
            <li>New cell is born if it has exactly 3 neighbours.</li>
            <li>Existing cell dies if it has 2 or 3 neighbours.</li>
        </ul>
    </div>
</div>